#creating a check for float inputs
def acceptableresponse(response):
    #attempt to alter response into a float
    try:
        float(response)
        return True
    #returns False when response is not a float/integer
    except ValueError:
        return False


#importing clear_output for aesthetic purposes
from IPython.display import clear_output


#counter to track error messages for ease of identification
counter=0


#creating a function that takes in input for annual spending
def annualspending():
    
    #link local variable to global variable
    global counter

    while True:
        
        #asks for user's input
        response = input("Please enter your annual spending amount.\nPress Q to exit at anytime: ")
        
        #check for exiting the function
        if response.upper() == "Q":
            print("Thank you. We will now exit you.")
            
            #returns None if exited early
            return None
        
        #check 1 for integer/float input
        elif acceptableresponse(response):
            response = float(response)
            
            #check 2 for positive amount
            if response>0:
                break
            
            #prompt for positive input when check 2 failed
            else:
                counter += 1
                print(f"{counter}. Please key in a positive number above 0.\n")
        
        #prompt for integer/float input when check 1 failed
        else:
            counter += 1
            print(f"{counter}. Please key in a numerical without any commas and without the '$' sign. E.g. 10000\n")
    
    #returns a value
    return response


#creating a function that takes in input for savings rate
def savingsrate():
    
    #link local variable to global variable
    global counter

    while True:
        
        #asks for user's input
        response = input("Please enter your annual savings rate (as a percentage of your income). E.g. 20 (for 20%).\nPress Q to exit at anytime: ")
        
        #check for exiting the function
        if response.upper() == "Q":
            print("Thank you. We will now exit you.")
            
            #returns None if exited early
            return None
        
        #check 1 for integer/float input
        elif acceptableresponse(response):
            response = float(response)
            
            #check 2 for positive amount
            if response>0:
                break
            
            #prompt for positive input when check 2 failed
            else:
                counter += 1
                print(f"{counter}. Please key in a positive number above 0.\n")
        
        #prompt for integer/float input when check 1 failed
        else:
            counter += 1
            print(f"{counter}. Please key in a numerical without any commas and without the '%' sign. E.g. 10 (for 10%)\n")
    
    #returns a value
    return response


#creating a function that takes in input for annual income
def annualincome():
    
    #link local variable to global variable
    global counter

    while True:
        #asks for user's input
        response = input("Please enter your annual income. \nPress Q to exit at anytime: ")
        
        #check for exiting the function
        if response.upper() == "Q":
            print("Thank you. We will now exit you.")
            
            #returns None if exited early
            return None
        
        #check 1 for integer/float input
        elif acceptableresponse(response):
            response = float(response)
            
            #check 2 for positive amount
            if response>0:
                break
            
            #prompt for positive input when check 2 failed
            else:
                counter += 1
                print(f"{counter}. Please key in a positive number above 0.\n")
        
        #prompt for integer/float input when check 1 failed
        else:
            counter += 1
            print(f"{counter}. Please key in a numerical without any commas and without the '$' sign.\n")
    
    #returns a value
    return response


#creating a function that takes in input for expected annual ROI
def annualROI():
    
    #link local variable to global variable
    global counter

    while True:
        #asks for user's input
        response = input("Please enter your expected annual ROI (Return on Investments) (as a percentage). E.g. 20 (for 20%).\nPress Q to exit at anytime: ")
        
        #check for exiting the function
        if response.upper() == "Q":
            print("Thank you. We will now exit you.")
            
            #returns None if exited early
            return None
        
        #check 1 for integer/float input
        elif acceptableresponse(response):
            response = float(response)
            
            #check 2 for positive amount
            if response>0:
                break
            
            #prompt for positive input when check 2 failed
            else:
                counter += 1
                print(f"{counter}. Please key in a positive number above 0.\n")
        
        #prompt for integer/float input when check 1 failed
        else:
            counter += 1
            print(f"{counter}. Please key in a numerical without any commas and without the '%' sign. E.g. 10 (for 10%)\n")
    
    #returns a value
    return response


#creating a function that takes in input for desired withdrawal rate
def withdrawalrate():
    
    #link local variable to global variable
    global counter

    while True:
        #asks for user's input
        response = input("Please enter your desired withdrawal rate (as a percentage). E.g. 20 (for 20%).\nPress Q to exit at anytime: ")
        
        #check for exiting the function
        if response.upper() == "Q":
            print("Thank you. We will now exit you.")
            
            #returns None if exited early
            return None
        
        #check 1 for integer/float input
        elif acceptableresponse(response):
            response = float(response)
            
            #check 2 for positive amount
            if response>0:
                break
            
            #prompt for positive input when check 2 failed
            else:
                counter += 1
                print(f"{counter}. Please key in a positive number above 0.\n")
        
        #prompt for integer/float input when check 1 failed
        else:
            counter += 1
            print(f"{counter}. Please key in a numerical without any commas and without the '%' sign. E.g. 10 (for 10%).\n")
    
    #print output for user
    #if type(response)==float:
    #    print(f"Desired Withdrawal Rate: {response}%")
    
    #returns a value
    return response


#creating a function that calculates the total savings
#function takes in two parameters(annual spending, withdrawal rate)
def savingscalculator(spending, withdrawalrate):
    savingsneeded = spending/(withdrawalrate/100)
    
    #function returns the amount of savings needed
    return savingsneeded


#creating a function that calculates the years until FIRE
#function takes in four parameters(annual income, annual savings rate, expected ROI, savings needed)
def firecalculator(income, savingsrate, roi, savingsneeded):
    
    #setting up current savings to be 0 and years to fire at 0
    currentsavings = 0
    years_to_fire = 0
    
    #while loop will continue as long as current savings is lesser than savings needed
    while currentsavings < savingsneeded:
        
        #each loop updates the current savings as the product of the saved income and the returns on the current savings
        currentsavings += income*(savingsrate/100) + currentsavings*(roi/100)
        
        #each loop that is counted for the number of years to fire
        years_to_fire += 1
    
    #function returns the number of years required for current savings to match the amount of savings needed
    return years_to_fire



#full test - putting all functions together

#introductory message to orientate user
print("Good day Sir/Mdm")
print("\nWelcome to the FIRE (Financially Independent, Retire Early) calculator.")
print("\nThis function serves to calculate the total savings you need based on your current lifestyle and spending,\nand the amount of years you will require to reach it based on your current saving and investment patterns.")
print("\nPlease follow the instructions and provide your details for us to do the calculations.\n\n")

#setting up to start the sequence and counter
startFIRE = True
counter = 0

#request for user input to start
while True:
    response=input("Would you like to start? (Y or N)\n")
    if response.upper() == "Y":
        break
    elif response.upper() == "N":
        startFIRE = False
        print("Thank you. We will now exit you.")
        break
    else:
        print("Please select 'Y' or 'N'. Thank you.")

while startFIRE:
    #requesting for user inputs
    spending = annualspending()

    #checks to continue with sequence
    if type(spending) == float:
        sr = savingsrate()
    else:
        break
        
    #checks to continue with sequence
    if type(sr) == float:
        income = annualincome()
    else:
        break

    #checks to continue with sequence
    if type(income) == float:
        roi = annualROI()
    else:
        break

    #checks to continue with sequence
    if type(roi) == float:
        wr = withdrawalrate()
    else:
        break

    #checks to continue with sequence
    if type(wr) == float:

        #clears all error prompts for visual ease
        clear_output(wait=True)
        
        #prints user input if user did not quit early
        print(f"Annual Spending:\n${spending:,.2f}\n")
        print(f"Annual Savings Rate:\n{sr:.1f}%\n")
        print(f"Annual Income:\n${income:,.2f}\n")
        print(f"Expected ROI:\n{roi:.1f}%\n")
        print(f"Desired Withdrawal Rate:\n{sr:.1f}%\n")
    
    else:
        break

    #presents FIRE calculations based on user input
    amtneeded = savingscalculator(spending,wr)
    print(f"\nTotal Savings Needed: ${amtneeded:,.2f}")
    years = firecalculator(income, sr, roi, amtneeded)
    print(f"Total Years Needed: {years}\n")
    
    #requests for user input to restart the sequence
    while True:
        response=input("Would you like to restart? (Y or N)\n")
        if response.upper() == "Y":
            break
        elif response.upper() == "N":
            startFIRE = False
            print("\nThank you. We will now exit you.")
            break
        else:
            print("Please select 'Y' or 'N'. Thank you.")